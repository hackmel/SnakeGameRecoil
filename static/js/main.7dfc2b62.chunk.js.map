{"version":3,"sources":["models/atoms.js","models/selectors.js","components/snake.jsx","containers/snake.jsx","hooks/useKeyPress.js","components/food.jsx","containers/food.jsx","containers/snake-game.jsx","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["SnakeTailState","atom","key","default","top","left","FoodState","KeyPressState","makeSnakeLonger","selector","set","tail","get","length","createFood","parseInt","Math","floor","random","checkIfFoodEaten","tails","food","isHit","forEach","element","checkIfCollidedWithWall","moveSnakeDirection","newTails","push","index","Tail","styled","div","props","Zurot","map","item","SnakeContainer","useState","keypressed","setKeyPressed","state","setState","useEffect","useKeyPress","keyPressed","useRecoilState","TailsState","setKeyPressState","useSetRecoilState","window","addEventListener","event","FoodBody","Food","FoodContainer","SnakeGame","addTail","addFood","moveSnake","isFoodEaten","useRecoilValue","isWallHit","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","location","reload","alert","className","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7dfc2b62.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nexport const SnakeTailState = atom({\r\n  key: \"SnakeTailState\",\r\n  default: [\r\n    { top: 50, left: 50 },\r\n    { top: 50, left: 5 },\r\n    { top: 50, left: 10 },\r\n  ],\r\n});\r\n\r\nexport const FoodState = atom({\r\n  key: \"FoodState\",\r\n  default: { top: 0, left: 0 },\r\n});\r\n\r\nexport const KeyPressState = atom({\r\n  key: \"KeyPressState\",\r\n  default: \"\",\r\n});\r\n","import { selector } from \"recoil\";\r\nimport { SnakeTailState, FoodState, KeyPressState } from \"./atoms\";\r\n\r\nexport const makeSnakeLonger = selector({\r\n  key: \"makeSnakeLonger\",\r\n  set: ({ set, get }) => {\r\n    var tail = get(SnakeTailState);\r\n    set(SnakeTailState, [\r\n      ...tail,\r\n      { top: tail[tail.length - 1].top, left: tail[tail.length - 1].left },\r\n    ]);\r\n  },\r\n});\r\n\r\nexport const createFood = selector({\r\n  key: \"createFood\",\r\n  set: ({ set }) => {\r\n    let left = parseInt(Math.floor(Math.random() * Math.floor(100)) / 5) * 5;\r\n    let top = parseInt(Math.floor(Math.random() * Math.floor(100)) / 5) * 5;\r\n\r\n    set(FoodState, { left: left, top: top });\r\n  },\r\n});\r\n\r\nexport const checkIfFoodEaten = selector({\r\n  key: \"checkIfFoodEaten\",\r\n  get: ({ get }) => {\r\n    var tails = get(SnakeTailState);\r\n    var food = get(FoodState);\r\n    var isHit = false;\r\n\r\n    tails.forEach((element) => {\r\n      if (element.top === food.top && element.left === food.left) {\r\n        isHit = true;\r\n      }\r\n    });\r\n\r\n    return isHit;\r\n  },\r\n});\r\n\r\nexport const checkIfCollidedWithWall = selector({\r\n  key: \"checkIfCollidedWithWall\",\r\n  get: ({ get }) => {\r\n    var tails = get(SnakeTailState);\r\n\r\n    return (\r\n      tails[0].left >= 100 ||\r\n      tails[0].top >= 100 ||\r\n      tails[0].left <= -1 ||\r\n      tails[0].top <= -1\r\n    );\r\n  },\r\n});\r\n\r\nexport const moveSnakeDirection = selector({\r\n  key: \"moveSnakeDirection\",\r\n  set: ({ set, get }) => {\r\n    var tails = get(SnakeTailState);\r\n    var keyPressed = get(KeyPressState);\r\n\r\n    var newTails = [];\r\n\r\n    switch (keyPressed) {\r\n      case \"Left\":\r\n        newTails.push({\r\n          left: tails[0].left - 5,\r\n          top: tails[0].top,\r\n        });\r\n        break;\r\n      case \"Right\":\r\n        newTails.push({\r\n          left: tails[0].left + 5,\r\n          top: tails[0].top,\r\n        });\r\n        break;\r\n      case \"Up\":\r\n        newTails.push({\r\n          left: tails[0].left,\r\n          top: tails[0].top - 5,\r\n        });\r\n        break;\r\n      case \"Down\":\r\n        newTails.push({\r\n          left: tails[0].left,\r\n          top: tails[0].top + 5,\r\n        });\r\n        break;\r\n      default:\r\n        newTails.push({\r\n          left: tails[0].left,\r\n          top: tails[0].top + 5,\r\n        });\r\n        break;\r\n    }\r\n\r\n    for (var index = 1; index < tails.length; index++) {\r\n      newTails.push({\r\n        top: tails[index - 1].top,\r\n        left: tails[index - 1].left,\r\n      });\r\n    }\r\n\r\n    set(SnakeTailState, newTails);\r\n  },\r\n});\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Tail = styled.div`\r\n  position: absolute;\r\n  background-color: blue;\r\n  height: 5%;\r\n  width: 5%;\r\n  top: ${(props) => props.top}%;\r\n  left: ${(props) => props.left}%;\r\n`;\r\n\r\nexport const Zurot = (props) => {\r\n  return props.tails.map((item) => {\r\n    return <Tail left={item.left} top={item.top} />;\r\n  });\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { useKeyPress } from \"../hooks/useKeyPress\";\r\nimport { Zurot } from \"../components/snake\";\r\nimport { SnakeTailState, KeyPressState } from \"../models/atoms\";\r\n\r\nexport const SnakeContainer = () => {\r\n  const [keyPressed, setKeyPressed] = useKeyPress();\r\n  const [TailsState] = useRecoilState(SnakeTailState);\r\n  const setKeyPressState = useSetRecoilState(KeyPressState);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", (event) => {\r\n      setKeyPressed(event);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setKeyPressState(keyPressed);\r\n  }, [keyPressed]);\r\n\r\n  return <Zurot tails={TailsState} />;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nexport const useKeyPress = () => {\r\n  const [keypressed, setKeyPressed] = useState(\"\");\r\n  const [state, setState] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const keyCode = state.key;\r\n\r\n    switch (keyCode) {\r\n      case \"ArrowLeft\":\r\n        setKeyPressed(\"Left\");\r\n        break;\r\n      case \"ArrowRight\":\r\n        setKeyPressed(\"Right\");\r\n        break;\r\n      case \"ArrowUp\":\r\n        setKeyPressed(\"Up\");\r\n        break;\r\n      case \"ArrowDown\":\r\n        setKeyPressed(\"Down\");\r\n        break;\r\n      default:\r\n        setKeyPressed(\"Down\");\r\n        break;\r\n    }\r\n  }, [state]);\r\n\r\n  return [keypressed, setState];\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst FoodBody = styled.div`\r\n  position: absolute;\r\n  background-color: red;\r\n  height: 5%;\r\n  width: 5%;\r\n  top: ${(props) => props.top}%;\r\n  left: ${(props) => props.left}%;\r\n`;\r\n\r\nexport const Food = (props) => {\r\n  return <FoodBody left={props.left} top={props.top} />;\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Food } from \"../components/food\";\r\nimport { FoodState } from \"../models/atoms\";\r\n\r\nexport const FoodContainer = () => {\r\n  const [food] = useRecoilState(FoodState);\r\n  return <Food left={food.left} top={food.top} />;\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useSetRecoilState, useRecoilValue } from \"recoil\";\r\n\r\nimport {\r\n  makeSnakeLonger,\r\n  createFood,\r\n  checkIfFoodEaten,\r\n  checkIfCollidedWithWall,\r\n  moveSnakeDirection,\r\n} from \"../models/selectors\";\r\n\r\nimport { SnakeContainer } from \"./snake\";\r\nimport { FoodContainer } from \"./food\";\r\n\r\nimport { useInterval } from \"../hooks/useInterval\";\r\n\r\nimport \"../App.css\";\r\n\r\nexport default function SnakeGame() {\r\n  // setter selectors that updates the state\r\n  const addTail = useSetRecoilState(makeSnakeLonger);\r\n  const addFood = useSetRecoilState(createFood);\r\n  const moveSnake = useSetRecoilState(moveSnakeDirection);\r\n\r\n  //getter selectors that are used to compute the state without changing them\r\n  const isFoodEaten = useRecoilValue(checkIfFoodEaten);\r\n  const isWallHit = useRecoilValue(checkIfCollidedWithWall);\r\n\r\n  useEffect(() => {\r\n    addFood();\r\n  }, []);\r\n\r\n  useInterval(() => {\r\n    moveSnake();\r\n    if (isWallHit) {\r\n      window.location.reload();\r\n      alert(\"Game Over\");\r\n    }\r\n\r\n    if (isFoodEaten) {\r\n      addTail();\r\n      addFood();\r\n    }\r\n  }, 200);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <SnakeContainer />\r\n      <FoodContainer />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\n\r\nexport function useInterval(callback, delay) {\r\n  const savedCallback = useRef();\r\n\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  });\r\n\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    let id = setInterval(tick, delay);\r\n    return () => clearInterval(id);\r\n  }, [delay]);\r\n}\r\n","import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  RecoilRoot,\n  atom,\n  selector,\n  useRecoilState,\n  useRecoilValue,\n} from \"recoil\";\nimport SnakeGame from \"./containers/snake-game\";\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <SnakeGame />\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}